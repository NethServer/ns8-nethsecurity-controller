{
  "common": {
    "required": "Required",
    "work_in_progress": "Work in progress",
    "processing": "Processing..."
  },
  "status": {
    "title": "Status",
    "app_instance": "App instance",
    "services": "Service | Services",
    "app_images": "App image | App images",
    "app_volumes": "App volume | App volumes",
    "installation_node": "Installation node",
    "node": "Node",
    "name": "Name",
    "size": "Size",
    "created": "Created",
    "mount": "Mount",
    "no_services": "No services",
    "no_images": "No images",
    "no_volumes": "No volumes",
    "open_controller": "Open Controller",
    "ovpn_udp_port": "OpenVPN UDP port"
  },
  "settings": {
    "title": "Settings",
    "advanced": "Advanced",
    "configure_instance": "Configure {instance}",
    "save": "Save",
    "host": "Controller Fully Qualified Domain Name",
    "cn": "Controller name",
    "user": "Administrator user",
    "password": "Default administrator password",
    "network": "VPN network",
    "netmask": "VPN netmask",
    "lets_encrypt": "Request Let's Encrypt certificate",
    "disabled": "Disabled",
    "enabled": "Enabled",
    "loki_retention": "Logs retention",
    "loki_retention_helper": "Days to keep logs in Loki",
    "prometheus_retention": "Metrics retention",
    "prometheus_retention_helper": "Days to keep metrics in Prometheus and Timescale",
    "prometheus_retention_tooltip": "Timescale is a time-series database used to store metrics. It is used by the controller to store and aggregate additional metrics on top of the metrics provided by Prometheus.",
    "cn_helper": "The name of the controller, used to create the VPN certification authority",
    "network_helper": "The VPN network used to connect the units to the controller.",
    "user_helper": "This is the only user that can create and manage other users inside the controller",
    "user_tooltip": "The username grants access to the controller user interface and also to Grafana. Once configured, it cannot be changed",
    "password_helper": "The administrator password can be set only during first configuration",
    "password_tooltip": "The password grants access both to the controller user interface and also to Grafana. For security reasons, you should change it after first login",
    "host_helper": "The FQDN of the controller, it must be reachable from the units",
    "cn_tooltip": "The field will be read-only after the first configuration",
    "network_tooltip": "Make sure this network does not overlap with the units' networks. The field will be read-only after the first configuration",
    "netmask_tooltip": "Do not change this value unless you know what you are doing. The field will be read-only after the first configuration",
    "netmask_helper": "The netmask determines the size of the VPN network. Use only class C networks",
    "password_placeholder": "Password can be modified from the controller webapp",
    "password_information_title": "Default password",
    "password_information_description": "The default administrator password is displayed only once, please store it in a safe place",
    "vpn_port_description": "Units will connect to controller using a VPN connection. Make sure the units can reach the controller on UDP port {port}",
    "maxmind_license": "MaxMind license key",
    "maxmind_license_helper": "The license key is required to use the MaxMind GeoIP2 database",
    "allowed_ips": "Allowed IPs",
    "allowed_ips_helper": "Add one IPv4 or CIDR per line. Listed networks can access the controller. If empty, all IPs are allowed",
    "public_endpoints": "API public endpoints",
    "public_endpoints_helper": "Add one path per line. Listed endpoints will be always accessible despite the source IP address. Add at least /api/register to allow units to register",
    "hardening_description": "To harden the controller, specify the allowed IPs that can access it. Ensure that the public_endpoints list contains at least /api/register. If your unit version is older than 1.7.0, also add /api/ingest. All other traffic will be routed through the VPN."
  },
  "about": {
    "title": "About"
  },
  "task": {
    "cannot_create_task": "Cannot create task {action}"
  },
  "action": {
    "get-status": "Get status",
    "get-configuration": "Get configuration",
    "configure-module": "Configure module",
    "get-module-info": "Get module info",
    "get-name": "Get name",
    "list-backup-repositories": "List backup repositories",
    "list-backups": "List backups",
    "list-installed-modules": "List installed modules"
  },
  "error": {
    "error": "Error",
    "generic_error": "Something went wrong",
    "validation_error": "Validation error",
    "network_error": "Network error",
    "network_timeout": "Network timeout",
    "401": "Invalid authentication",
    "403": "Operation not authorized",
    "404": "Resource not found",
    "cannot_retrieve_module_info": "Cannot retrieve module info",
    "cannot_retrieve_installed_modules": "Cannot retrieve installed modules",
    "invalid_cn": "Invalid controller name: it must contain only letters and numbers",
    "invalid_user": "Invalid user name: it must contain only letters and numbers",
    "invalid_host": "Invalid host name: it must be a valid FQDN",
    "loki_retention": "Invalid logs retention",
    "prometheus_retention": "Invalid metrics retention",
    "prometheus_rention_max": "Metrics retention must be less than 365 days",
    "prometheus_rention_min": "Metrics retention must be greater than 1 day",
    "loki_retention_max": "Logs retention must be less than 365 days",
    "loki_retention_min": "Logs retention must be greater than 1 day",
    "invalid_network": "Invalid network, it mus be a class C network like 192.168.200.0",
    "invalid_netmask": "Invalid netmask, it must be a valid netmask like 255.255.255.0",
    "invalid_allowed_ips": "Invalid allowed IPs, each entry must be a and IP or CIDR network. Both IPv4 and IPv6 are supported",
    "invalid_public_endpoints": "Invalid public endpoints, each entry must be a valid path like /api/register or /api/ingest"
  }
}
