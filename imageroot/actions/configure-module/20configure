#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import sys
import agent
import agent.tasks
import os
import hashlib

request = json.load(sys.stdin)

ports = os.environ["TCP_PORTS"].split(',')

# Configure Traefik to route requests to the nextsec-controller service
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  'http://127.0.0.1:' + ports[3],
        'http2https': True,
        'lets_encrypt': request["lets_encrypt"],
        'host': request["host"],
    },
)

# Replace password if passed as parameter, otherwise read the old one
if 'api_password' in request and request['api_password'] != '':
    request['api_password'] = hashlib.sha256(request['api_password'].encode('utf-8')).hexdigest()
else:
    with open('config.json', 'r') as tmp:
        tmp = json.load(tmp)
        request['api_password'] = tmp['api_password']

# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)

# Save configuration to JSON for later user and backup
with open('config.json', 'w') as config:
    config.write(json.dumps(request))

with open('config.env', 'w') as env:
    env.write(f'API_USER={request["api_user"]}\n')
    env.write(f'API_PASSWORD={request["api_password"]}\n')
    env.write(f'OVPN_NETWORK={request["ovpn_network"]}\n')
    env.write(f'OVPN_NETMASK={request["ovpn_netmask"]}\n')
    env.write(f'OVPN_CN={request["ovpn_cn"]}\n')
