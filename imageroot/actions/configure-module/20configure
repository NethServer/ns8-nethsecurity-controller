#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import agent.tasks
import os
import hashlib
import uuid

request = json.load(sys.stdin)

(start,end) = os.environ["TCP_PORTS_RANGE"].split('-')
ports = [*range(int(start), int(end)+1)]

try:
    with open('config.json', 'r') as tmp:
        config = json.load(tmp)
except:
    config = request

for path in ['loki_path', 'prometheus_path']:
    if not config.get(path):
        config[path] = f'/{uuid.uuid4()}'

# Configure Traefik to route requests to the nethsec-controller service
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  f'http://127.0.0.1:{ports[3]}',
        'http2https': True,
        'lets_encrypt': request["lets_encrypt"],
        'host': request["host"],
    },
)
agent.assert_exp(response['exit_code'] == 0)
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '_grafana',
        'url':  f'http://127.0.0.1:{ports[8]}',
        'http2https': True,
        'lets_encrypt': request["lets_encrypt"],
        'host': request["host"],
        'path': '/grafana'
    },
)
agent.assert_exp(response['exit_code'] == 0)
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '_loki',
        'url':  f'http://127.0.0.1:{ports[5]}',
        'http2https': True,
        'lets_encrypt': request["lets_encrypt"],
        'host': request["host"],
        'path': config['loki_path']
    },
)
agent.assert_exp(response['exit_code'] == 0)
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '_prometheus',
        'url':  f'http://127.0.0.1:{ports[7]}',
        'http2https': True,
        'lets_encrypt': request["lets_encrypt"],
        'host': request["host"],
        'path': config['prometheus_path']
    },
)
agent.assert_exp(response['exit_code'] == 0)


# Replace password if passed as parameter, otherwise read the old one
if 'api_password' in request and request['api_password'] != '':
    request['api_password'] = hashlib.sha256(request['api_password'].encode('utf-8')).hexdigest()
else:
    request['api_password'] = config['api_password']


# Save configuration to JSON for later user and backup
with open('config.json', 'w') as cfp:
    cfp.write(json.dumps(config | request))

with open('config.env', 'w') as env:
    env.write(f'ADMIN_USER={request["api_user"]}\n')
    env.write(f'ADMIN_PASSWORD={request["api_password"]}\n')
    env.write(f'OVPN_NETWORK={request["ovpn_network"]}\n')
    env.write(f'OVPN_NETMASK={request["ovpn_netmask"]}\n')
    env.write(f'OVPN_CN={request["ovpn_cn"]}\n')
    env.write(f'FQDN={request["host"]}\n')

server_address = request["ovpn_network"].removesuffix('.0') + '.1'
with open('promtail.env', 'w') as promtail:
    promtail.write('LOKI_ADDR=127.0.0.1\n')
    promtail.write(f'LOKI_HTTP_PORT={ports[5]}\n')
    promtail.write(f'PROMTAIL_ADDRESS={server_address}\n')
    promtail.write(f'PROMTAIL_PORT={ports[4]}\n')

with open('loki.env', 'w') as lfp:
    lfp.write(f"LOKI_HTTP_PORT={ports[5]}\n")
    lfp.write(f"LOKI_GRPC_PORT={ports[6]}\n")
    lfp.write(f"LOKI_RETENTION={request.get('loki_rentention', '180')}d\n") # retention in days

with open('grafana.env', 'w') as gfp:
    gfp.write(f"GF_DEFAULT_INSTANCE_NAME={request['host']}\n")
    gfp.write(f"GF_SERVER_ROOT_URL=https://{request['host']}/grafana\n")
    gfp.write("GF_SERVER_SERVE_FROM_SUB_PATH=true\n")
    gfp.write(f"GF_SERVER_HTTP_PORT={ports[8]}\n")
    gfp.write("GF_SERVER_HTTP_ADDR=127.0.0.1\n")

with open('prometheus.env', 'w') as pfp:
    pfp.write(f"PROMETHEUS_PORT={ports[7]}\n")
    pfp.write(f"PROMETHEUS_PATH={config['prometheus_path']}\n")
    pfp.write(f"PROMETHEUS_RETENTION={request.get('prometheus_retention', '15')}d\n")

with open('prometheus.yml', 'w', encoding='utf-8') as fp:
    fp.write("global:\n")
    fp.write("scrape_configs:\n")
    fp.write('  - job_name: "node"\n')
    fp.write('    file_sd_configs:\n')
    fp.write('      - files:\n')
    fp.write('        - "/prometheus/prometheus.d/*.yml"\n')
    fp.write('  - job_name: "loki"\n')
    fp.write('    static_configs:\n')
    fp.write('      - targets:\n')
    fp.write(f'        - 127.0.0.1:{ports[5]}\n')

# Grafana configuration
with open('local.yml', 'w') as fp:
    fp.write("apiVersion: 1\n")
    fp.write("datasources:\n")
    fp.write('  - name: Local Promethus\n')
    fp.write('    type: prometheus\n')
    fp.write('    uid: prometheus\n')
    fp.write('    access: proxy\n')
    fp.write(f'    url: http://127.0.0.1:{ports[7]}{config["prometheus_path"]}\n')

    fp.write('  - name: Local Loki\n')
    fp.write('    type: loki\n')
    fp.write('    uid: loki\n')
    fp.write('    access: proxy\n')
    fp.write(f'    url: http://127.0.0.1:{ports[5]}\n')

network = agent.read_envfile('network.env')
tun = network.get('OVPN_TUN')
bits = sum(bin(int(x)).count('1') for x in request["ovpn_netmask"].split('.'))
cidr = f'{request["ovpn_network"]}/{bits}'
rules = [
    f'rule family=ipv4 priority=-100 source address={server_address} destination address={cidr} accept',
    f'rule family=ipv4 priority=-99 source address={cidr} destination address={server_address} accept',
    f'rule family=ipv4 priority=-98 source address={cidr} destination address={cidr} reject'
]
ports = [f"{ports[4]}/tcp"] # promtail port
agent.add_custom_zone(tun, tun, ports, rules)

network = agent.read_envfile('network.env')
agent.add_tun(network.get('OVPN_TUN'), f'{server_address}/{bits}')
