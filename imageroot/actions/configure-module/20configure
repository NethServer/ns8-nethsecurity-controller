#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import sys
import agent
import agent.tasks
import os
import hashlib

request = json.load(sys.stdin)

ports = os.environ["TCP_PORTS"].split(',')

# Configure Traefik to route requests to the nextsec-controller service
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'],
        'url':  'http://127.0.0.1:' + ports[3],
        'http2https': True,
        'lets_encrypt': request["lets_encrypt"],
        'host': request["host"],
    },
)

# Replace password if passed as parameter, otherwise read the old one
if 'api_password' in request and request['api_password'] != '':
    request['api_password'] = hashlib.sha256(request['api_password'].encode('utf-8')).hexdigest()
else:
    with open('config.json', 'r') as tmp:
        tmp = json.load(tmp)
        request['api_password'] = tmp['api_password']

# Check if traefik configuration has been successfull
agent.assert_exp(response['exit_code'] == 0)

# Save configuration to JSON for later user and backup
with open('config.json', 'w') as config:
    config.write(json.dumps(request))

with open('config.env', 'w') as env:
    env.write(f'API_USER={request["api_user"]}\n')
    env.write(f'API_PASSWORD={request["api_password"]}\n')
    env.write(f'OVPN_NETWORK={request["ovpn_network"]}\n')
    env.write(f'OVPN_NETMASK={request["ovpn_netmask"]}\n')
    env.write(f'OVPN_CN={request["ovpn_cn"]}\n')
    env.write(f'FQDN={request["host"]}\n')

server_address = request["ovpn_network"].removesuffix('.0') + '.1'
with open('promtail.env', 'w') as promtail:
    redis_client = agent.redis_connect()
    loki_instance = redis_client.get('cluster/default_instance/loki')
    loki_addr = redis_client.hget(f'module/{loki_instance}/environment', 'LOKI_ADDR')
    loki_http_port = redis_client.hget(f'module/{loki_instance}/environment', 'LOKI_HTTP_PORT')
    loki_logs_ingress_token = redis_client.hget(f'module/{loki_instance}/environment', 'LOKI_LOGS_INGRESS_TOKEN')
    promtail_address = server_address
    promtail_port = ports[4]

    promtail.write(f'LOKI_ADDR={loki_addr}\n')
    promtail.write(f'LOKI_HTTP_PORT={loki_http_port}\n')
    promtail.write(f'LOKI_LOGS_INGRESS_TOKEN={loki_logs_ingress_token}\n')
    promtail.write(f'PROMTAIL_ADDRESS={promtail_address}\n')
    promtail.write(f'PROMTAIL_PORT={promtail_port}\n')


network = agent.read_envfile('network.env')
tun = network.get('OVPN_TUN')
bits = sum(bin(int(x)).count('1') for x in request["ovpn_netmask"].split('.'))
cidr = f'{request["ovpn_network"]}/{bits}'
rules = [
    f'rule family=ipv4 priority=-100 source address={server_address} destination address={cidr} accept',
    f'rule family=ipv4 priority=-99 source address={cidr} destination address={server_address} accept',
    f'rule family=ipv4 priority=-98 source address={cidr} destination address={cidr} reject'
]
ports = [f"{ports[4]}/tcp"] # promtail port
agent.add_custom_zone(tun, tun, ports, rules)
