#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

# Allocate new port for timescale

import os
import sys
import json
import agent
import subprocess
import uuid
import hashlib

if not hasattr(agent, 'allocate_ports'):
    sys.exit(0) # core version too old, skip and try on next update

# Read the env file, do not use real environment because it could be not updated
env = agent.read_envfile('environment')
(start,end) = env["TCP_PORTS_RANGE"].split('-')
ports = [*range(int(start), int(end)+1)]

# Checks:
# - skip allocation if the module has already allocated an extra port during an old update
# - skip allocation if the module has already 11 ports allocated on first installation
if 'TCP_PORT_DB' in env or len(ports) > 10:
    sys.exit(0)

# Allocate a new port
allocated_ports = agent.allocate_ports(1, "tcp", keep_existing=True)
db_port = allocated_ports[0]
print(f"New ports allocated: {db_port}", file=sys.stderr)

# Update the environment file: this will used as flag to avoid re-allocating the port
agent.set_env('TCP_PORT_DB', db_port)

# Generate db.env because database has never been configured
db_secret = hashlib.sha256(uuid.uuid4().bytes).hexdigest()
grafana_postgres_password = hashlib.sha256(uuid.uuid4().bytes).hexdigest()
with open('db.env', 'w') as db_fp:
    db_fp.write(f"POSTGRES_USER=report\n")
    db_fp.write(f"POSTGRES_PORT={db_port}\n")
    db_fp.write(f"POSTGRES_PASSWORD={db_secret}\n")
    db_fp.write(f"GRAFANA_POSTGRES_PASSWORD={grafana_postgres_password}\n")
    db_fp.write(f"REPORT_DB_URI=postgres://report:{db_secret}@127.0.0.1:{db_port}/report")
    db_fp.write(f"TS_TUNE_MAX_BG_WORKERS=100")

with open('grafana.yml', 'a') as fp:
    fp.write('  - name: Local Timescale\n')
    fp.write('    type: postgres\n')
    fp.write('    uid: timescale\n')
    fp.write(f'    url: 127.0.0.1:{db_port}\n')
    fp.write(f'    user: grafana\n')
    fp.write('    secureJsonData:\n')
    fp.write(f'      password: {grafana_postgres_password}\n')
    fp.write('    jsonData:\n')
    fp.write('      database: report\n')
    fp.write('      sslmode: disable\n')
    fp.write('      maxOpenConns: 100\n')
    fp.write('      maxIdleConns: 100\n')
    fp.write('      maxIdleConnsAuto: true\n')
    fp.write('      connMaxLifetime: 14400\n')
    fp.write('      postgresVersion: 1500\n')
    fp.write('      timescaledb: true\n')